
@using Kendo.Mvc.UI;


@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Telerik MVC HTML5 Report Viewer</title>

    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <script src="@Url.Content("~/Scripts/kendo/2019.1.220/jquery.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo/2019.1.220/kendo.all.min.js")"></script>

    <link href="@Url.Content("~/Content/kendo/2019.1.220/kendo.common.min.css")" rel="stylesheet" type="text/css" />

    <link href="@Url.Content("~/Content/kendo/2019.1.220/kendo.blueopal.min.css")" rel="stylesheet" type="text/css" />

    <!--kendo.web.min.js or kendo.all.min.js can be used as well instead of the following custom Kendo UI-->
    <script src="@Url.Content("~/ReportViewer/js/telerikReportViewer.kendo-13.0.19.222.min.js")"></script>

    <style>
        #reportViewer1 {
            position: relative;
            width: 1300px;
            height: 900px;
            font-family: Verdana, Arial;
        }
    </style>

    <script src="@Url.Content("~/ReportViewer/js/telerikReportViewer-13.0.19.222.min.js")"></script>
    @*<script type="text/javascript">
        var uri = window.location.toString();
        if (uri.indexOf("?") > 0) {
            var clean_uri = uri.substring(0, uri.indexOf("?"));
            window.history.replaceState({}, document.title, clean_uri);
        }
            </script>*@

</head>
<body>
    @*@{
        //var reportid = Request.QueryString["reportid"];
        //if (reportid != null) {
        // //   __reportRepository.GetAllReports().Where(x => x.
        //}

        var filename = HttpContext.Request.Query["filename"];
        var foldername = Request.QueryString["fname"];

        filename = System.Web.HttpUtility.UrlDecode(filename);
        foldername = System.Web.HttpUtility.UrlDecode(foldername);

        UriReportSource urs = new UriReportSource()
        {
            Uri = Path.Combine(Server.MapPath(SettingsManager.BaseReportPath), foldername + "\\" + filename) //"OrphanCard.trdp"@"/Assets/Reports
        };

        var value = Request.QueryString["list"];

        if (!String.IsNullOrEmpty((string) (value)))
        {
            urs.Parameters.Add(new Telerik.Reporting.Parameter() { Name = "Id", Value = "'" + value +"'" });
        }
        else
        {
            urs.Parameters.Add(new Telerik.Reporting.Parameter() { Name = "Id", Value = "All" });
        }

        //Telerik.Reporting.NavigateToUrlAction UrlAction1 = new Telerik.Reporting.NavigateToUrlAction();
        //UrlAction1.Url = "http://demos.telerik.com/reporting";

    }


    @(Html.TelerikReporting().ReportViewer()

        // Each report viewer must have an id - it will be used by the initialization script
        // to find the element and initialize the report viewer.
        .Id("reportViewer1")
        // The URL of the service which will serve reports.
        // The URL corresponds to the name of the controller class (ReportsController).
        // For more information on how to configure the service please check http://www.telerik.com/help/reporting/telerik-reporting-rest-conception.html.
        .ServiceUrl(Url.Content("/api/reports" ))
         // The URL for the report viewer template. The template can be edited -
         // new functionalities can be added and unneeded ones can be removed.-10.2.16.914
         // For more information please check http://www.telerik.com/help/reporting/html5-report-viewer-templates.html.
         
        // Strongly typed ReportSource - TypeReportSource or UriReportSource.
        //  .ReportSource(new UriReportSource() { Uri = "OrphanCard3.trdx" })new UriReportSource() { Uri = ""

        .ReportSource(urs)
        // Specifies whether the viewer is in interactive or print preview mode.
        // PrintPreview - Displays the paginated report as if it is printed on paper. Interactivity is not enabled.
        // Interactive - Displays the report in its original width and height with no paging. Additionally interactivity is enabled.
        .ViewMode(ViewMode.Interactive)
        // Sets the scale mode of the viewer.
        // Three modes exist currently:
        // FitPage - The whole report will fit on the page (will zoom in or out), regardless of its width and height.
        // FitPageWidth - The report will be zoomed in or out so that the width of the screen and the width of the report match.
        // Specific - Uses the scale to zoom in and out the report.
        .ScaleMode(ScaleMode.Specific)
        // Zoom in and out the report using the scale
        // 1.0 is equal to 100%, i.e. the original size of the report
        .Scale(1.0)
        // Sets whether the viewer�s client session to be persisted between the page�s refreshes(ex. postback).
        // The session is stored in the browser�s sessionStorage and is available for the duration of the page session.
        .PersistSession(false)
        // Sets the print mode of the viewer.
        .PrintMode(PrintMode.AutoSelect)

    )*@

</body>
</html>